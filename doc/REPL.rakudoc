=begin pod

=head1 NAME

REPL - a more easily configurable REPL

=head1 SYNOPSIS

=begin code :lang<raku>

use REPL;

# Start a Read, Evaluate, Print Loop
repl;

=end code

=head1 DESCRIPTION

The REPL module is a re-imagining of the REPL (Read, Evaluate, Print Loop)
functionality as offered by Rakudo before the 2024.11 release.  It provides
both a programmable interface, as well as a ready made C<"repl"> CLI.

=head1 SUBROUTINES

=head2 repl

=begin code :lang<raku>

repl;

=end code

The C<repl> subroutine creates a new C<REPL> object for that context
and returns that.  When called in sink context, it will activate the
interactive Read, Evaluate, Print Loop.

=begin code :lang<raku>

my $repl = do {
    my $a = 42;
    repl
}

# ...

# activate REPL later, allowing access to $a even though that
# variable is no longer in scope
$repl.run;

=end code

It is also possible to save the C<REPL> object at one place in the
code, and actually run the REPL at a later time in another scope.

=head2 standard-completions

The C<standard-completions> subroutine provides the standard completion
logic if no C<:additional-completions> argument has been specified with
either C<REPL.new> or the C<repl> subroutine.

It is provided to allow it to be added with the <:additional-completions>
argument, and to allow testing of the standard completion logic.

=head2 uniname-words

The C<uniname-words> subroutine provides the same functionality as
the C<uniname-words> subroutine provided by the
L<C<uniname-words>|https://raku.land/zef:lizmat/uniname-words>
distribution B<if> that distribution is installed.

Otherwise it will always return C<Nil>.

=head2 RUNNING A REPL

The C<REPL> role is what usually gets punned into a class.

=begin code :lang<raku>

my $repl = REPL.new;

$repl.run;

=end code

Same as above, but with all named arguments spelled out:

=begin code :lang<raku>

my $repl = REPL.new:
  :editor(Any),    # or "Readline", "LineEditor", "Linenoise"
  :output-method<gist>,  # or "Str", "raku"
  :out = $*OUT,
  :err = $*ERR,
  :val = $*OUT,
  :header,
  :multi-line-ok,
  :is-win($*DISTRO.is-win),
  :@completions,
  :@additional-completions,
  :compiler<Raku>,
;

=end code

The C<REPL> role embodies the information needed to run a Read,
Evaluate, Print Loop.  It allows for these named arguments:

=head3 :editor

Optional.  String indicating which editor logic to be used.

If the C<INSIDE_EMACS> environment variable is set with a true
value, then the C<Fallback> editor will be used.

If it can be determined from the environment that the process is
running inside the "rlwrap" wrapper, then the C<Fallback> editor
will be used.

If the C<RAKUDO_LINE_EDITOR> environment variable is set, then
its contents will be assumed as an indication of preference and
will first be tried.  If that fails, an error message will be
shown.

Whatever is then the value, that value will be used to create a
L<C<Prompt>|https://raku.land/zef:lizmat/Prompt> object.

=head3 :prompt

The L<C<Prompt>|https://raku.land/zef:lizmat/Prompt> object to be
used.  If specified, overrides anything related to the <C:editor>
named argument.  If not specified, will use whatever was (implicitely)
specified with C<:editor>.

=head3 :output-method

String.  The name of the method to be called to display the value
of an expression.  This defaults to the value of the
C<RAKU_REPL_OUTPUT_METHOD> environment variable, or to "gist" if
that has not been specified.

Used value available with the C<.output-method> method.

=head3 :header

Boolean.  Indicate whether to show the REPL header upon entry.
Defaults to C<True>.

Used value available with the C<.header> method.

=head3 :out

Optional. The C<:out> named argument specifies the value of C<$*OUT>
whenever a command is executed. If not specified, or specified with
an undefined value, will assume the value of C<$*OUT> at command
execution time.

=head3 :err

Optional. The C<:err> named argument specifies the value of C<$*ERR>
whenever a command is executed. If not specified, or specified with
an undefined value, will assume the value of C<$*ERR> at command
execution time.

=head3 :multi-line-ok

Boolean. Indicate whether it is ok to interprete multiple lines
of input as a single statement to evaluate.  Defaults to C<True>
unless the C<RAKUDO_DISABLE_MULTILINE> environment variable has
been specified with a true value.

Used value available with the C<.multi-line-ok> method.

=head3 :is-win

Boolean.  Indicate whether certain OS dependent checks should assume
Windows semantics.  Defaults to C<$*DISTRO.is-win>.

Used value available with the C<.is-win> method.

=head3 :completions

A C<List> of strings to be used tab-completions.  If none are specified,
then a default Raku set of completions will be used.

Used value available with the C<.completions> method.

=head3 :additional-completions

=begin code

# completion that uppercases whole line if ended with a !
sub shout($line, $pos) {
    ($line.chop.uc,) if $pos == $line.chars && $line.ends-with("!")
}

my $repl = REPL.new(:additional-completions(&shout));

=end code

A C<List> of C<Callables> to be called to produce tab-completions.
If none are specified, the C<standard-completions> will be assumed.

Each C<Callable> is expected to accept two positional arguments:
the line that has been entered so far, and the position of the cursor.
It is expected to return a (potentially) empty C<List> with the
new state of the line (so including everything before and after
the completion).

=head3 :compiler

String.  The HLL compiler to be used.  This defaults to "Raku", which
is the only compiler supported at this time.

Used value available with the C<.compiler> method.

=head2 method run

Actually run the REPL.

=head1 OTHER METHODS

=head2 err

The object to be used for error output.  Defaults to C<$*ERR>.

=head2 history

Expected to take no arguments, and return an object that represents
the (possibly persistent) history of the REPL's interactive
sessions.

By default it will first look for a C<RAKUDO_HIST> environment variable
and return an C<IO::Path> object for that.  If that environment
variable is not specified, will check the C<$*HOME> and C<$*TMPDIR>
dynamic variables for the existence of a C<.raku> subdirectory
in that.  If found, will return an C<IO::Path> for the
"rakudo-history" file in that subdirectory and try to create
that if it didn't exist yet (and produce an error message if
that failed).

=head2 out

The object to be used for standard output.  Defaults to C<$*OUT>.

=head2 prompt

The L<C<Prompt>|https://raku.land/zef:lizmat/Prompt> object to be
used when obtaining input from the user.  Also handles the C<read>,
C<readline>, C<load-history>, C<add-history>, C<save-history> and
C<editor-name> methods.

=head2 supports-completions

Returns a C<Bool> indicating whether the selected editor supports
completions.

=head2 teardown

Expected to take no arguments.  Will be called whenever the user
indicates that they want to exit the REPL.  Will call the
C<save-history> method by default.

=head2 val

The object to be used for outputting values that weren't shown
already.  Defaults to C<$*OUT>.

=head1 USER COMMANDS

The following commands are currently supported: if a command is not
recognized, then C<Raku> code will be assumed and executed if possible.

=head2 editor

Shows the name of the editor logic being used.  Can be shortened all the
way to "ed".

=head2 exit

Leaves the REPL.  Can be shortened all the way to "ex".

=head2 help

Shows a list of available commands.  Can be shortened all the way to "h".

=head2 quit

Leaves the REPL.  Can be shortened all the way to "q".

=head1 TAB COMPLETIONS

If the C<supports-completions> method returns C<True>, the standard
tab-completion logic will provide:
=item all relevant items from the CORE:: namespace
=item any relevant items from the direct context
=item \^123 will tab-complete to ¹²³
=item \_123 will tab-complete to ₁₂₃
=item foo! will tab-complete to FOO, foo, Foo

Additionally, if the L<C<uniname-words>|https://raku.land/zef:lizmat/uniname-words>
module is installed:
=item any unclosed L<B<\\c[>|https://docs.raku.org/syntax/%5Cc>
sequence will tab-complete on the names of Unicode code-points
=item any B<\word> will tab-complete to the actual codepoints

=head1 GOALS

The following goals have been defined so far:

=item Adherence to supporting currently by the REPL logic recognized
environment variables (done)
=item Provide an actual REPL class that can be easily configured and
provide documentation (done)
=item Attempt to fix many outstanding bugs about the Rakudo REPL.
=item Provided better documented and better maintainable code that is
based on "modern" Raku (done)
=item Provide a way to support specific commands and their actions
so that we don't need any REPL helper modules, but provide an
API to provide additional functionality (done)
=item Once the API for customization is more stable, replace the
REPL code in Rakudo with the code in this module.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/REPL . Comments and
Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2024 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
