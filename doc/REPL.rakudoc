=begin pod

=head1 NAME

REPL - a more easily configurable REPL

=head1 SYNOPSIS

=begin code :lang<raku>

use REPL;

# Start a Read, Evaluate, Print Loop
repl;

=end code

=head1 DESCRIPTION

The REPL module is a re-imagining of the REPL (Read, Evaluate, Print Loop)
functionality as offered by Rakudo before the 2024.11 release.

=head1 SUBROUTINES

=head2 repl

=begin code :lang<raku>

repl;

=end code

The C<repl> subroutine creates a new C<REPL> object for that context
and returns that.  When called in sink context, it will activate the
interactive Read, Evaluate, Print Loop.

=begin code :lang<raku>

my $repl = do {
    my $a = 42;
    repl
}

# ...

# activate REPL later, allowing access to $a even though that
# variable is no longer in scope
$repl.run;

=end code

It is also possible to save the C<REPL> object at one place in the
code, and actually run the REPL at a later time in another scope.

=head1 ROLES

The C<REPL> role is what usually gets punned into a class.

The C<REPL::Fallback> role provides all of the logic if no specific
editor has been found.  It also serves as a base role for specific
editor roles, such as C<REPL::Readline>, C<REPL::LineEditor> and
C<REPL::Linenoise>.

=head2 REPL

=begin code :lang<raku>

my $repl = REPL.new;

$repl.run;

=end code

Same as above, but with all named arguments spelled out:

=begin code :lang<raku>

my $repl = REPL.new:
  :editor(Any),    # or "Readline", "LineEditor", "Linenoise"
  :output-method<gist>,  # or "Str", "raku"
  :header,
  :multi-line-ok,
  :is-win($*DISTRO.is-win),
  :compiler<Raku>,
;

=end code

The C<REPL> role embodies the information needed to run a Read,
Evaluate, Print Loop.  It allows for these named arguments:

=head3 :editor

The editor logic to be used.  Can be specified as a string, or
as an instantiated object that inplements the C<REPL::Fallback>
role.

If the C<INSIDE_EMACS> environment variable is set with a true
value, then the C<Fallback> editor will B<always> be used,
regardless of any other settings.

If the C<RAKUDO_LINE_EDITOR> environment variable is set, then
its contents will be assumed as an indication of preference and
will first be tried.  If that fails, an error message will be
shown.

If the value is not a string, it is expected to be a class that
implements to the C<REPL::Fallback> interface.

Otherwise defaults to C<Any>, which means to search first for unknown
roles in the C<REPL::> namespace, then to try if there is support
installed for L<C<Readline>|https://raku.land/zef:clarkema/Readline>,
L<C<LineEditor>|https://raku.land/zef:japhb/Terminal::LineEditor>, or
L<C<Linenoise>|https://raku.land/zef:raku-community-modules/Linenoise>.

If that failed, then the C<Fallback> editor logic will be used, which
may cause a cumbersome user experience, unless the process was wrapped
with a call to the L<C<rlwrap>|https://github.com/hanslub42/rlwrap>
readline wrapper.

=head3 :output-method

String.  The name of the method to be called to display the value
of an expression.  This defaults to the value of the
C<RAKU_REPL_OUTPUT_METHOD> environment variable, or to "gist" if
that has not been specified.

Used value available with the C<.output-method> method.

=head3 :header

Boolean.  Indicate whether to show the REPL header upon entry.
Defaults to C<True>.

Used value available with the C<.header> method.

=head3 :multi-line-ok

Boolean. Indicate whether it is ok to interprete multiple lines
of input as a single statement to evaluate.  Defaults to C<True>
unless the C<RAKUDO_DISABLE_MULTILINE> environment variable has
been specified with a true value.

Used value available with the C<.multi-line-ok> method.

=head3 :is-win

Boolean.  Indicate whether certain OS dependent checks should assume
Windows semantics.  Defaults to C<$*DISTRO.is-win>.

Used value available with the C<.is-win> method.

=head3 :compiler

String.  The HLL compiler to be used.  This defaults to "Raku", which
is the only compiler supported at this time.

Used value available with the C<.compiler> method.

=head3 method run

Actually run the REPL.

=head1 EDITOR ROLES

An editor role must supply the methods as defined by the
C<REPL::Fallback> role.  Its C<new> method should either return
an instantiated class, or C<Nil> if the class could not be
instantiated (usually because of lack of installed modules).

The other methods are (in alphabetical order):

=head2 add-history

Expected to take a single string argument to be added to the
(possibLy persistent) history of the REPL's interactive sessions.
Does not perform any action by default in C<REPL::Fallback>.

=head2 ERR

Expected to take no arguments, and return an object that supports
a C<.say> method.  Will be used instead of the regular C<$*ERR>
during evalution of the user's input, and to output any error
messages during the interacive session.  Defaults to C<$*ERR>
in C<REPL::Fallback>.

=head2 history

Expected to take no arguments, and return an object that represents
the (possibly persistent) history of the REPL's interactive
sessions.

By default (by the implementation of the C<REPL::Fallback> role
will first look for a C<RAKUDO_HIST> environment variable and
return an C<IO::Path> object for that.  If that environment
variable is not specified, will check the C<$*HOME> and C<$*TMPDIR>
dynamic variables for the existence of a C<.raku> subdirectory
in that.  If found, will return an C<IO::Path> for the
"rakudo-history" file in that subdirectory and try to create
that if it didn't exist yet (and produce an error message if
that failed).

=head2 load-history

Expected to take no arguments and load any persistent history
information, as indicated by its C<history> method.  Does not
perform any action by the default implementation in the
C<REPL::Fallback> role.

=head2 OUT

Expected to take no arguments, and return an object that supports
a C<.say> method.  Will be used instead of the regular C<$*OUT>
during evalution of the user's input.  Defaults to C<$*OUT> in
C<REPL::Fallback>.

=head2 read

Expected to take a string argument with the prompt to be shown,
and return the next line of input from the user.  Expected to
return an undefined value to indicate the user wishes to exit
the REPL.

Defaults to showing the prompt and taking a line from C<$*IN> in
C<REPL::Fallback>.

=head2 save-history

Expected to take no arguments and save any persistent history
information, as indicated by its C<history> method.  Does not
perform any action by the default implementation in the
C<REPL::Fallback> role.

=head2 silent

Expected to take no arguments, and return a C<Bool> indicating
the last evaluation produced any output.

Implemented in the C<REPL::Fallback> role as taking the position
of the file pointers on C<$*OUT> and C<$*ERR> (every time the
C<.OUT> and C<.ERR> methods are called) and compare that to
their current positions.

If the method returns C<True>, then the value C<.VAL> method
will be used to call the C<.say> method on with the value of
the last evaluation (converted to string by its C<:output-method>.

=head2 teardown

Expected to take no arguments.  Will be called whenever the user
indicates that they want to exit the REPL.  Will call the
C<save-history> method By default in the C<REPL::Fallback>
implementation.

=head2 VAL

Expected to take no arguments, and return an object that supports
a C<.say> method.  Will be used instead of the regular C<$*OUT>
to output the result of an evaluation if that output did not cause
any output by itself.  Defaults to C<$*OUT> in C<REPL::Fallback>.

=head2 REPL::Fallback

Apart from the definition of the interface for editors, it provides
the default logic for handling the interaction with the user.

=head2 REPL::Readline

The role that implements the user interface using the
L<C<Readline>|https://raku.land/zef:clarkema/Readline> module.

=head2 REPL::LineEditor

The role that implements the user interface using the
L<C<Terminal::LineEditor>|https://raku.land/zef:japhb/Terminal::LineEditor>
module.

=head2 REPL::Linenoise

The role that implements the user interface using the
L<C<Linenoise>|https://raku.land/zef:raku-community-modules/Linenoise>
module.

=head1 GOALS

The following goals have been defined so far:

=item Adherence to supporting currently by the REPL logic recognized
environment variables (done)
=item Provide an actual REPL class that can be easily configured and
provide documentation (done)
=item Attempt to fix many outstanding bugs about the Rakudo REPL.
=item Provided better documented and better maintainable code that is
based on "modern" Raku (done)
=item Once the API for customization is more stable, replace the
REPL code in Rakudo with the code in this module.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/REPL . Comments and
Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2024 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
